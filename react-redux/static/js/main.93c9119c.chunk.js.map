{"version":3,"sources":["reducers/PostReducer.js","reducers/index.js","actions/types.js","store.js","components/Posts.js","actions/postActions.js","components/PostForm.js","App.js","serviceWorker.js","index.js"],"names":["initialState","items","item","combineReducers","posts","state","arguments","length","undefined","action","type","Object","objectSpread","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","Posts","this","props","fetchPost","nextProps","newPost","unshift","postsItem","map","post","react_default","a","createElement","key","id","title","body","Component","connect","dispatch","fetch","then","res","json","data","PostForm","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","setState","defineProperty","target","name","value","preventDefault","createPost","onSubmit","bind","onChange","defaultValue","cols","rows","postData","method","headers","Content-type","JSON","stringify","App","es","className","components_PostForm","components_Posts","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93c9119c.chunk.js","sourcesContent":["// 引入 dispatch的type类型\r\nimport { FETCH_POST, NEW_POST } from '../actions/types'\r\n// reducer的作用: 返回新的状态\r\n// 定义一个变量,\r\nconst initialState = {\r\n    //存储你想要获取的状态 \r\n    items: [],//1.访问到当前的文件中的时候定义一个初始状态\r\n    item: []//1.访问到当前的文件中的时候定义一个初始状态\r\n}\r\nexport default function (state = initialState, action) {//reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state。\r\n    switch (action.type) {//2.在switch的时候会传过来对应的数据,在此修改状态,返回给到初始定义的属性中最终返回到组件中去\r\n        // 判断dispatch返回的是否有FETCH_POST这个属性值,如果有再返回\r\n        case FETCH_POST:\r\n            return {\r\n                ...state,\r\n                // 把postActions.js中分发成功的值赋给items\r\n                items: action.payload\r\n            }\r\n        // 对用户添加数据的type类型进行判断 \r\n        case NEW_POST:\r\n            return {\r\n                ...state,\r\n                // 把postActions.js中分发成功的值赋给item\r\n                item: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","// reducer合成,redux自身提供的一个方法\r\nimport { combineReducers } from 'redux'\r\nimport postReducer from './PostReducer'\r\nexport default combineReducers({\r\n    // 这里写生成状态的方法,这个方法会最后合成一个大的reducer,会拆分多个小的\r\n    posts:postReducer,//这里是引的posts.js中的state数据,所有的数据包括请求的数据,提交的数据都会在Posts对象下\r\n\r\n})","// 请求数据\r\nexport const FETCH_POST = \"FETCH_POST\";\r\n// 添加数据\r\nexport const NEW_POST = 'NEW_POST';","// 导入中间件\r\nimport { createStore ,applyMiddleware,compose} from 'redux';\r\n// 导入thunk\r\nimport thunk from \"redux-thunk\";\r\n// reducer不至一个,所以我们需要对reducer折分,新建一个文件\r\nimport rootReducer from './reducers/index'\r\n\r\n// 定义state\r\nconst initialState = {};\r\n/**\r\n * 中间件,\r\n * redux-thunk中间件可以让action创建函数先不返回一个action对象，\r\n * 而是返回一个函数，函数传递两个参数(dispatch,getState),在函数体内进行业务逻辑的封装\r\n * 激活redux-thunk中间件，只需要在createStore中加入applyMiddleware(thunk)就可以\r\n *  */\r\nconst middleware = [thunk]\r\n/**\r\n * 创建store：\r\n * rootReducer 代表Reducer为一个数组\r\n * initialState 代表 state,先定义空对象到时会返回新状态\r\n * applyMiddleware(...middleware) 代表中间件,里的middleware是从thunk中引过来的,\r\n * 作用是将所有的中间件组成一个数组依次执行,基本操作就是一个异步\r\n *  */\r\nexport const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n    )","import React, { Component } from 'react'\r\n// 给不前的状态规定一个数据类型,这是react给我们的一个标准\r\nimport propTypes from 'prop-types'\r\n//1. 想让Posts使用fetchPost的方法 ,就要使用reducer中提供的connect来连接\r\nimport { connect } from 'react-redux'\r\n// fetchPost为在postActions定义的方法\r\nimport { fetchPost } from '../actions/postActions'\r\n\r\nclass Posts extends Component {\r\n    componentDidMount() {\r\n        /**\r\n         * 3.调用fetchPost中的方法,把原本 需要在这里的请求的方法剪切到postAction.js中去\r\n         * 触发action操作\r\n         */\r\n        this.props.fetchPost()\r\n    }\r\n    // 在组件发生改变的时候触发,用户添加数据后接收从PostForm.js页面传来的值进行渲染\r\n    componentWillReceiveProps(nextProps){\r\n        // 在调用钩子函数时判断nextProps下有newPost,就unshift到this.props.posts并渲染出来,\r\n        if(nextProps.newPost){\r\n            this.props.posts.unshift(nextProps.newPost)\r\n        }\r\n    }\r\n    render() {//展示之前对state数组posts中的数据遍历\r\n        // const postsItem = this.state.posts.map(post =>(\r\n            // 使用reduce中的数据就这里就不能用this.state,而是改用props\r\n        const postsItem = this.props.posts.map(post => (\r\n            <div key={post.id}>\r\n                <h3>{post.title}</h3>\r\n                <p>{post.body}</p>\r\n            </div>\r\n        ))\r\n        return (\r\n            <div>\r\n                {postsItem}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 规定方法和状态的使用类型\r\nPosts.propTypes ={\r\n    // 第一个为当前的方法\r\n    fetchPost:propTypes.func.isRequired,\r\n    // 第二个为数组,是在PostReducer.js中定义的\r\n    posts : propTypes.array.isRequired\r\n}\r\n/**\r\n * 将返回回来的状态转化成我们的属性props\r\n */\r\nconst mapStateToProps = state => ({\r\n    /**\r\n     * state中的posts是在reducers中的index.js定义的posts\r\n     * items 中posts的属性值是在postReducer.js中定义的初始值\r\n     *  */\r\n    posts: state.posts.items,\r\n    newPost:state.posts.item\r\n})\r\n/**\r\n * 2.connect连接 \r\n * connect接收两个方法\r\n * connect(mapStateToProps, {fetchPost})\r\n * \r\n *  */\r\nexport default connect(mapStateToProps, { fetchPost })(Posts);","// 引入types.js文件\r\nimport {FETCH_POST,NEW_POST} from './types'\r\n\r\n// 优化操作\r\nexport const fetchPost = () => dispatch =>{\r\n    // 进行分发\r\n        fetch('http://jsonplaceholder.typicode.com/posts')\r\n        .then(res =>{\r\n            return  res.json()//解析Json数据\r\n        }).then(data =>{\r\n            // 用dispatch进行内容分发\r\n            dispatch({\r\n                /**\r\n                 * type是指定一定要有的,在这里定义的属性值,我们会把它抽离到types.js中\r\n                 * FETCH_POST是dispatch到我们的store中去store会返回到reducer当中,reducer要知道他是哪一个,返回哪一个状态\r\n                 * 如果dispatch成功会返回到postReducer.js中去,在postreducer.js中去判断type属性值\r\n                 *  */\r\n                type:FETCH_POST,\r\n                // 把请求的data返回回去\r\n                payload:data\r\n            })\r\n        })\r\n}\r\nexport const createPost = postData =>dispatch =>{//接收postFrom.js页面传过来的post参数这里形参为postData\r\n    fetch('http://jsonplaceholder.typicode.com/posts',{\r\n            // post提交\r\n            method:\"POST\",\r\n            headers:{\r\n                \"Content-type\":\"application/json\"\r\n            },\r\n            body:JSON.stringify(postData)//把提交的内容转字符串\r\n        })\r\n        .then(res =>res.json())\r\n        .then(data =>{\r\n            dispatch({\r\n                /**\r\n                 * type是指定一定要有的,在这里定义的属性值,我们会把它抽离到types.js中\r\n                 * NEW_POST是dispatch到我们的store中去store会返回到reducer当中,reducer要知道他是哪一个,返回哪一个状态\r\n                 * 如果dispatch成功会返回到postReducer.js中去,在postreducer.js中去判断type属性值\r\n                 *  */\r\n                type:NEW_POST,\r\n                // 把请求的data返回回去\r\n                payload:data\r\n            })\r\n        })\r\n\r\n}","import React, { Component } from 'react'\r\n// 给不前的状态规定一个数据类型,这是react给我们的一个标准\r\nimport propTypes from 'prop-types'\r\n//1. 想让Posts使用fetchPost的方法 ,就要使用reducer中提供的connect来连接\r\nimport { connect } from 'react-redux'\r\n// { createPost } 为es6 的解构方法 createPost是从postActions中解构出来的方法\r\nimport { createPost } from '../actions/postActions'\r\n\r\nclass PostForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            title: '',\r\n            body: ''\r\n        };\r\n    }\r\n    onChange(e) {//把当前修改的值赋入state\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n    onSubmit(e) {\r\n        // 阻止事件传递\r\n       e.preventDefault();\r\n        // 把表单用的最终数据从state中提取出来,传入请求\r\n        const post ={\r\n            title:this.state.title,\r\n            body:this.state.body\r\n        }\r\n        // 触发redux 中的action方法,把需要提交的post参数传入\r\n        this.props.createPost(post)//把以下原本在页面的fetch请求剪切至actions文件中的PostActions.js文件中\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>添加内容</h1>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div>\r\n                        <label >title</label>\r\n                        <br />\r\n                        <input type=\"text\" name=\"title\" onChange={this.onChange.bind(this)} defaultValue={this.state.title} />\r\n                    </div>\r\n                    <div>\r\n                        <label >body</label>\r\n                        <br />\r\n                        <textarea name=\"body\" id=\"\" cols=\"30\" rows=\"10\" onChange={this.onChange.bind(this)} defaultValue={this.state.body}></textarea>\r\n                    </div>\r\n                    <br />\r\n                    <button type=\"submit\">添加</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// 规定方法和状态的使用类型\r\nPostForm.propTypes ={\r\n    // 第一个为当前的方法\r\n    createPost:propTypes.func.isRequired,\r\n    // 第二个为数组,是在PostReducer.js中定义的,如果一开始itme中没有值的话会报警告value为 undefined\r\n    posts: propTypes.array.isRequired\r\n}\r\n// 用connect将PostFromt和createPost连接起来从而达到数据对接\r\nexport default connect(null,{createPost})(PostForm);\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n// 状态管理\r\nimport { Provider } from 'react-redux';\r\n// 引入store.js\r\nimport {store} from \"./store\"\r\n// 子组件\r\nimport Posts from './components/Posts'\r\nimport PostForm from './components/PostForm'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      // 用Provider把所有的组件内容包裹起来\r\n      <Provider store={store}>\r\n        <div className=\"App\">\r\n          <PostForm />\r\n          <Posts />\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}